
##In this tutorial we were supposed to train with different classifiers
# available in the scikitlearn library and nltk to find the algorithm giving highest accuracy



# After several classifiers, we want to develop a voting system wherein each classifier would say whether a tweet/ record/review is  pos or neg
# and we will take a vote of each classifier and say something with confidence. For instande out of 7 classifiers, 6 say that the movie review
# is positive and 1 say that movie review is negative so we can say with 6/7=0.8572 confidence that review is pos



import nltk
import random
from nltk.corpus import movie_reviews
import pickle
from nltk.classify.scikitlearn import SklearnClassifier

from sklearn.naive_bayes import MultinomialNB,GaussianNB,BernoulliNB
from sklearn.linear_model import LogisticRegression,SGDClassifier
from sklearn.svm import SVC,LinearSVC,NuSVC
from nltk.classify import ClassifierI
from statistics import mode
from nltk import word_tokenize


class VoteClassifier(ClassifierI):
    def __init__(self,*classifiers):
        self._classifiers=classifiers
    def classify(self, features):
        votes=[]
        for c in self._classifiers:
            v=c.classify(features)
            votes.append(v)
            return mode(votes)

    def confidence(self,features):
        votes = []
        for c in self._classifiers:
            v = c.classify(features)
            votes.append(v)

        choice_votes=votes.count(mode(votes))
        conf=choice_votes/len(votes)
        return conf


##2000 movie reviews in total, 1000 movie reviews negative
def classifier():

    short_pos=open('short_reviews/positive.txt','r').read()
    short_neg=open('short_reviews/negative.txt','r').read()
    documents=[]
    for r in short_pos.split('\n'):
        documents.append((r,'pos'))
    for r in short_neg.split('\n'):
        documents.append((r,'neg'))
    short_pos_words= word_tokenize(short_pos)
    short_neg_words=word_tokenize(short_neg)

    all_words=[]

    for w in short_pos_words:
        all_words.append(w.lower())

    for w in short_neg_words:
        all_words.append(w.lower())

    all_words=nltk.FreqDist(all_words)
    #print(all_words.most_common(15))
    #print('count of bad',all_words['bad'])
    word_features=list(all_words.keys())[:5000]

    def find_features(document):
        words=word_tokenize(document)
        features={}
        for w in word_features:
            features[w]=(w in words)
        return features
    feature_sets=[(find_features(rev),category) for (rev,category) in documents]
    random.shuffle(feature_sets)
    training_set=feature_sets[:10000]
    testing_set=feature_sets[10000:]

    #training using Naive bayes
    classifier=nltk.NaiveBayesClassifier.train(training_set)

    ##once the weights are saved use these weights from pickle on test dataset
    # classifier_f=open("naivebayes.pickle",'rb')
    # classifier=pickle.load(classifier_f)
    # classifier_f.close()


    print("Original Naive Bayes Algo accuracy percent:", (nltk.classify.accuracy(classifier,testing_set))*100)
    classifier.show_most_informative_features(15)
    ##saving the weights using pickle
    # save_classifier=open("naivebayes.pickle",'wb')
    # pickle.dump(classifier,save_classifier)
    # save_classifier.close()


    ##MultinomialNB,BernoulliNB, LogisticRegression,SGDClassifier, SVC,LinearSVC,NuSVC
    MNB_classifier=SklearnClassifier(MultinomialNB())
    MNB_classifier.train(training_set)
    print(" MNB_classifier accuracy percent:", (nltk.classify.accuracy(MNB_classifier, testing_set)) * 100)

    BernoulliNB_classifier=SklearnClassifier(BernoulliNB())
    BernoulliNB_classifier.train(training_set)
    print(" BernoulliNB_classifier accuracy percent:", (nltk.classify.accuracy(BernoulliNB_classifier, testing_set)) * 100)

    LogisticRegression_classifier = SklearnClassifier(LogisticRegression())
    LogisticRegression_classifier.train(training_set)
    print(" LogisticRegression_classifier accuracy percent:",
          (nltk.classify.accuracy(LogisticRegression_classifier, testing_set)) * 100)

    SGDClassifier_classifier = SklearnClassifier(SGDClassifier())
    SGDClassifier_classifier.train(training_set)
    print(" SGDClassifier_classifier accuracy percent:",
          (nltk.classify.accuracy(SGDClassifier_classifier, testing_set)) * 100)

    # SVC_classifier = SklearnClassifier(SVC())
    # SVC_classifier.train(training_set)
    # print(" SVC_classifier accuracy percent:",
    #       (nltk.classify.accuracy(SVC_classifier, testing_set)) * 100)

    LinearSVC_classifier = SklearnClassifier(LinearSVC())
    LinearSVC_classifier.train(training_set)
    print(" LinearSVC_classifier accuracy percent:",
          (nltk.classify.accuracy(LinearSVC_classifier, testing_set)) * 100)

    NuSVC_classifier = SklearnClassifier(LinearSVC())
    NuSVC_classifier.train(training_set)
    print(" NuSVC_classifier accuracy percent:",
          (nltk.classify.accuracy(NuSVC_classifier, testing_set)) * 100)



    voted_classifier=VoteClassifier(classifier,
                                    NuSVC_classifier,
                                    LinearSVC_classifier,
                                    SGDClassifier_classifier,
                                    LogisticRegression_classifier,
                                    BernoulliNB_classifier,
                                    MNB_classifier)
    print(" voted_classifier accuracy percent:",
          (nltk.classify.accuracy(voted_classifier, testing_set)) * 100)
    print("Classification: ",voted_classifier.classify(testing_set[0][0]),"Confidence%: ", voted_classifier.confidence(testing_set[0][0])* 100)
    print("Classification: ",
          voted_classifier.classify(testing_set[1][0]), "Confidence%: ", voted_classifier.confidence(testing_set[1][0])* 100)
    print("Classification: ",
          voted_classifier.classify(testing_set[2][0]), "Confidence%: ", voted_classifier.confidence(testing_set[2][0])* 100)
    print("Classification: ",
          voted_classifier.classify(testing_set[3][0]), "Confidence%: ", voted_classifier.confidence(testing_set[3][0])* 100)
    print("Classification: ",
          voted_classifier.classify(testing_set[4][0]), "Confidence%: ", voted_classifier.confidence(testing_set[4][0])* 100)
    print("Classification: ",
          voted_classifier.classify(testing_set[5][0]), "Confidence%: ", voted_classifier.confidence(testing_set[5][0])* 100)
classifier()
